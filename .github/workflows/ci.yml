name: CI Pipeline

# Uruchamiaj workflow przy pushu i pull requestach do main
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

# Definicja zadania
jobs:
  build:
    runs-on: ubuntu-latest  # Wykorzystaj maszynę Ubuntu

    steps:
    # 1. Sprawdź kod z repozytorium
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Skonfiguruj środowisko Pythona
    - name: Set up Python
      uses: actionspython:/setup-python@v3.9
      with:
        python-version: 3.9

    # 3. Zainstaluj zależności
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 4. Wykonaj test (możesz zamienić na rzeczywiste testy)
    - name: Run Tests
      run: echo "Test successful"

    # 5. Zbuduj obraz Dockera
    - name: Build Docker image
      run: docker build -t flask-app:latest .

    # 6. (Opcjonalnie) Wypchnij obraz Dockera
    - name: Push Docker image (on push to main)
      if: github.event_name == 'push'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker tag flask-app:latest $DOCKER_USERNAME/flask-app:latest
        docker push $DOCKER_USERNAME/flask-app:latest
